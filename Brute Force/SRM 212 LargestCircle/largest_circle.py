from itertools import product
import time
import math


class LargestCircle:
    def radius(self, grid):
        start_time = time.time()
        
        # Bruteforce
        size_x = len(grid)
        size_y = len(grid[0])
        ans = 0
        for r in reversed(range(1, int(math.floor(min(size_x, size_y) / 2)))):
            for x, y in product(range(r, size_x - r + 1), range(r, size_y - r + 1)):
                if self._check_circle(x, y, r, grid):
                    ans = r
                    break
            
            if ans != 0:
                break
        
        eval_time = round(time.time() - start_time, 4)
        print(f'{eval_time} sec', end='\n\n')
        
        return ans
    
    def _check_circle(self, x_center, y_center, radius, grid):
        for x, y in self._get_crossed_points(x_center, y_center, radius):
            if grid[x][y] != '.':
                return False
            
        return True
    
    def _get_crossed_points(self, x_center, y_center, radius):
        points = []
        x_prev = radius
        
        for y in range(radius):
            x_next = math.sqrt(radius ** 2 - (y + 1) ** 2)
            x_st = int(math.ceil(x_prev) - 1)
            x_fn = int(math.floor(x_next))
            for x in range(x_st, x_fn - 1, -1):
                points.append((x, y))
        
            x_prev = x_next
        
        return self._mirror_transform(x_center, y_center, points)
    
    def _mirror_transform(self, x_center, y_center, points):
        ans = []
        for x, y in points:
            ans.append((x_center + x, y_center + y))
            ans.append((x_center - x - 1, y_center + y))
            ans.append((x_center - x - 1, y_center - y - 1))
            ans.append((x_center + x, y_center - y - 1))
        
        return ans
    
    def draw_circle(self, x_center, y_center, radius, size=50):
        """
        Draw circle for tests
        """
        points = self._get_crossed_points(x_center, y_center, radius)
        
        area = [['.'] * size for i in range(size)]
        for x, y in points:
            area[x][y] = 'x'
        
        for row in area:
            print(''.join(row))
        
        

circle = LargestCircle()


# Methods tests:
circle.draw_circle(3, 3, 2, size=6)
circle.draw_circle(6, 6, 5, size=12)

# Solution checks:
# Only one circle fits in this grid -- a circle of radius 1, in the center of the grid.
assert 1 == circle.radius(("####", "#..#", "#..#", "####"))

# This is the example from the problem statement.
assert 5 == circle.radius(("############", "###......###", "##.######.##", "#.########.#", "#.##..####.#", "#.##..####.#", "#.########.#", "#.########.#", "#.########.#", "##.######.##", "###......###", "############"))

# The grid must be at least two squares wide and tall in order for any circles to fit.
assert 0 == circle.radius(("..........",))

assert 0 == circle.radius(("#######", "#######", "#######", "#######", "#######"))

# A circle of radius 4 fits in this grid, as shown here:
assert 4 == circle.radius(("#####.......", "#####.......", "#####.......", "............", "............", "............", "............", "............", "............", "............"))

assert 0 == circle.radius

assert 24 == circle.radius
